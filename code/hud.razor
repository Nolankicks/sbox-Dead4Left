@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent
@namespace Kicks
@using System.Linq;
<root>
	@if (LocalPlayer == null)
	{
		return;
	}

	<div class="newleft">
		<div class="text">
			<div class="icon">heart_broken</div>
			@LocalPlayer.Health
		</div>
		</div>
				@if (mp5 != null)
				{
				<div class="ammo">@mp5.ammo / @mp5.fullAmmo</div>
				}

	<div class="center">
		<div class="crosshair"></div>
	</div>
	<div class="left">
		<div class="score">
			<div class="score">
				<h1>Score:</h1>
				<p>@($"{LocalPlayer.Score:n0}")</p>
			</div>
			<div class="highscore">
				<h1>Highscore:</h1>
				<p>@($"{manager.HighScore:n0}")</p>
			</div>
		</div>
		<div class="leaderboard">
			@if(manager.Leaderboard is not null)
			{
				<h1>LEADERBOARD</h1>
				<div class="entries">
					@foreach(var entry in manager.Leaderboard.Entries)
					{
						<div class="entry @IsMe(entry)">
							<div class="rank">@entry.Rank</div>
							<div class="name">
								<image texture=@AvatarTexture(entry)/>
								<label>@entry.DisplayName</label>
							</div>
							<div class="value">@entry.FormattedValue</div>
						</div>
					}
				</div>
			}
		</div>
	</div>

</root>

@code
{
	public int i = 0;
	public static  MP5 mp5;
	//public static  Manager manager;
	public static  PlayerController LocalPlayer;
	public static  Weapon weapon;
	public static  Shotgun shotgun;
	[Property] public Manager manager { get; set; }
	[Property] public bool IsVisible { get; set; } = false;
	protected override void OnStart()
	{
		
		LocalPlayer = GameManager.ActiveScene.GetAllComponents<PlayerController>().FirstOrDefault( x => !x.IsProxy);
		weapon = GameManager.ActiveScene.GetAllComponents<Weapon>().FirstOrDefault(x => !x.IsProxy);
	}
        protected override void OnUpdate()
        {
            mp5 = GameManager.ActiveScene.GetAllComponents<MP5>().FirstOrDefault(x => !x.IsProxy);
        }

        string IsMe(Sandbox.Services.Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }


	string AvatarTexture(Sandbox.Services.Leaderboards.Entry entry)
    {
        return $"avatar:{entry.SteamId}";
    }
	
 
	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() 
	{
	return System.HashCode.Combine(LocalPlayer?.Score, LocalPlayer?.Health, mp5?.ammo, mp5?.fullAmmo);
	}
}
