@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@using Sandbox.Diagnostics;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using System.Linq;
@inherits PanelComponent
<root>
	<div class="left">
		<h1>LOBBY-LIST</h1>
		<div class="inner">
			<div class="button" onclick=@ToggleMaps>
				<div class="title">Create Lobby</div>
			</div>
			@if (IsRefreshing)
			{
				<div>Refreshing please wait...</div>
			}
			else if (List.Count == 0)
			{
				<div>No lobbies were found</div>
			}
			else
			{
				@foreach (var lobby in List)
				{
					<div class="button" onclick=@( () => OpenLobby( lobby ) )>
						<div class="title">
							@lobby.Name
						</div>	
						<div class="name">
							@lobby.Members / @lobby.MaxMembers
						</div>
					</div>
				}
			}
		</div>
		
	</div>
	<div class="MainText">
		<div class="normal">DEAD</div>
		<div class="red">4</div>
		<div class="normal">LEFT</div>
	</div>

	</div>
	
	
	
		<div class="mapselect @(ShowMaps ? "" : "hide")">
			<PackageList ShowFilters="@true" Query="type:map sort:trending" OnSelected="@OnPackageSelected" Take=@(50)></PackageList>
		</div>

	<div class="right">
		<div class="leaderboard">
			@if (manager.Leaderboard is not null)
			{
				<div class="header">LEADERBOARD</div>
				@foreach (var entry in manager.Leaderboard.Entries)
				{
					<div class="entry">
					<div class="ranking">@entry.Rank</div>
					<div class="name  @IsMe(entry)">
						<image class="image" texture=@AvatarTexture(entry)/>
					<div class="displayname">@entry.DisplayName</div>
					<div class="score">@entry.FormattedValue</div>
					</div>
					</div>
				}
			}

			</div>
		</div>
</root>


@code
{
	DropDown Themes { get; set; }
	[Property] public SceneFile GameScene { get; set; }
	private bool IsRefreshing { get; set; }
	private List<LobbyInformation> List { get; set; } = new();
	[Property] public bool ShowNotes { get; set; }
	[Property] public bool ShowMaps { get; set; } = false;
	public long HighScore { get; private set; } = 0;
	[Property] public Manager manager { get; set; }
	public Sandbox.Services.Leaderboards.Board Leaderboard;
		protected override void OnEnabled()
	{
		base.OnEnabled();
		
		_ = RefreshLobbyList();
	}

	

    
    private async Task RefreshLobbyList()
	{
		while ( true )
		{
			IsRefreshing = true;
			StateHasChanged();

			List = await Networking.QueryLobbies();

			IsRefreshing = false;
			StateHasChanged();

			await Task.DelayRealtimeSeconds( 5f );
		}
	}

    void OpenLobby( LobbyInformation lobby )
    {
        GameNetworkSystem.Connect( lobby.LobbyId );
    }
	
	void CreateLobby()
	{
	GameManager.ActiveScene.Load(GameScene);
	}
	protected override void OnUpdate()
	{
		if(Input.EscapePressed && ShowMaps)
		{
			ShowMaps = !ShowMaps;
		
		}
	}
	void Credits()
	{
		Log.Info("Credits");
	}

	  string IsMe(Sandbox.Services.Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }


	string AvatarTexture(Sandbox.Services.Leaderboards.Entry entry)
    {
        return $"avatar:{entry.SteamId}";
    }

	void OnPackageSelected(Package package)
	{
		LaunchArguments.Map = package.FullIdent;
		GameManager.ActiveScene.Load(GameScene);
	}
	void ToggleMaps()
	{
		ShowMaps = !ShowMaps;
	}

	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(RealTime.Now, ShowMaps);
}

