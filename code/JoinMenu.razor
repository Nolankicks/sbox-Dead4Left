@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Network;
@using Sandbox.Diagnostics;
@using System.Collections.Generic;
@using System.Threading.Tasks;
@using System.Linq;
@inherits PanelComponent

<root>

		<div class="left">
			<h1>LOBBY-LIST</h1>
		<div class="inner">
	@foreach (var lobby in list)
	{
		
		  <div class="button" onclick=@(() => OpenLobby( lobby ) )>
			<div class="title">
				@lobby.Name
			</div>	
			<div class="name">
				@lobby.Members / @lobby.MaxMembers
			</div>
		</div>
			


	}
	</div>
	</div>
</root>

@code
{

	[Property, TextArea] public string MyStringValue { get; set; } = "Hello World!";
	public bool refreshing;
	[Property] public SceneFile GameScene { get; set; }
	 List<LobbyInformation> list = new();
		protected override void OnUpdate()
		{
		Assert.True(GameObject.IsValid());

        _ = RefreshLobbyList();
		}
		async Task RefreshLobbyList()
    {
        bool isFirst = true;
        while ( true )
        {
            refreshing = true;
            StateHasChanged();

            list = await GameNetworkSystem.QueryLobbies();

            if(isFirst)
            {
                list = list.OrderBy( x => x.Members ).ToList();
                if(list.Count == 0)
                {

                }
                else if(list.Count == 1)
                {
                    GameNetworkSystem.Connect( list[0].LobbyId );
                }
            }

            refreshing = false;
            StateHasChanged();

            await Task.DelayRealtimeSeconds( 2.0f );

            isFirst = false;
        }
    }

    void OpenLobby( LobbyInformation lobby )
    {
        GameNetworkSystem.Connect( lobby.LobbyId );
    }

	void CreateLobby()
	{
GameManager.ActiveScene.Load(GameScene);
}


	/// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine( MyStringValue, list.Count, refreshing);
}
